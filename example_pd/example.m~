% 
% demonstrative example for NECom and FShaP simulations
% Jingyi Cai 2019-8
clear;clc;
thesolver='gurobi'; % choose from 'baron','bonmin' and 'gurobi', bonmin solver requires installation of OPTI toolbox on Windows 
% load the community model, which consists of two individual models,
%load ../themodel.mat themodel

% or directly create the community model using CobraToolbox
filename='pd.xls';
createModelCase1



% spreadsheet version of this model presents in 'Reactions',and
% 'Metabolites' page in pd.xls
%{
Data struct of the model:
(Assume the community model has I metabolites and J reactions, belonging to
N species. )

       rxns:       J by 1 string cell reactions
       mets:       I by 1 string cell metabolites
       S:          I by J Stoichiometry matrix of the model
       c:          J by 1 objective 0-1 vector 
       lb:         J by 1 real number vector for lower bounds of reactions 
       ub:         J by 1 real number vector for upper bounds of reactions 
       rxnSps:     J by 1 vector indicating to which species a reaction belong
                    (modelCom.rxns{j} belongs to species #modelCom.rxnSps(j))
       metSps:     I by 1 vector indicating to which species a metabolite belong
                    (modelCom.mets{j} belongs to species #modelCom.rxnSps(j),
                    0 for community metabolites)
       spBm:       1 by N vector indicating the ID of biomass reaction for each species
                    (species k has biomass reaction modelCom.rxns{modelCom.spBm(k)})
       EXsp:       Ids for exchange reactions between species and
                   community [a_ij] is the id for the export of i-th
%}

% now configure parameters for simulation

% the metabolites may only be exchanged between sp1 and sp2 are A and B(other metabolite 
% such as proton can be exchanged between organisms and environment, so not considered here)
% let's label A and B a metabolite number 1,2 repectively
% the associated crossfeeding reactions are EX_A_2_sp1 EX_B_2_sp1 EX_A_2_sp2 EX_B_2_sp2
% they are given an order 
parameters.cf_order=[1;2;3;4];
% find their reaction indices in the community model:
parameters.sub_indExSpi=[41;42;48;49];
% amount of crossfeeding reactions:
parameters.numSub_ExRxn=length(parameters.sub_indExSpi);
% since they are crossfeeding reactions for A,B,A,B, so their metabolite number are:  
parameters.spsInds=[1 2 1 2];
% and they belong to sp1,sp1,sp2, sp2, respectively:
parameters.sub_exSpi=[1;1;2;2];
% 
% crossfeeding reactions that can affect the availability of substrate
% uptaken by other species: EX_A_2_sp2 EX_B_2_sp2 EX_A_2_sp1 EX_B_2_sp1 and
% their indices:
parameters.other_Ex_all=[48;49;41;42];
% they belong to sp2,sp2,sp1,sp1 respectively:
parameters.other_sp_ind=[2;2;1;1];
% mapping to the reaction they may affect(refering to cf_order):
parameters.order_other=[1;2;3;4];


%---------------Final state predictions----------------------------
% run Joint-FBA simulation
[solfba1,Lmodel1,index1]=fba(themodel0); % Flux Balance Analysis
x1=solfba1.x;
%  joint-FBA only supports abundance ratio of 1:1, in order to compare 
%  different methods in paralell we set Relative abundance for sp1 and sp2:
X=[0.5,0.5]; % they are 1:1
% run OptCom simulation
[x2,exitflag2,index2,Lmodel2,fluxes2,info2]=OptCom(themodel,parameters,X,thesolver);
% run NECom simulation
[x3,exitflag3,index3,Lmodel3,fluxes3,info3]=NECOM(themodel,parameters,X,thesolver);
Indrxns=find(themodel.rxnSps>=1);
allfluxes=[x1(Indrxns),x2(Indrxns),x3(Indrxns)];
% if MS Office Excel install we can write it into the excel file. 
% need to uncheck all COM Add-in in Excel options to make it works
try xlswrite(filename,allfluxes,'reactions','H2');
    fprintf('fluxes predicted by jointFBA, OptCom and NEcom has been saved in pd.xls or pd.csv\n')
catch
    fprintf('fluxes predicted by jointFBA, OptCom and NEcom can be found in allfluxes matrix\n')
end

fprintf('Test if the flux predicted by JointFBA is feasible to NECom...');
externalconstr.lbindices=1:length(themodel.rxns);
externalconstr.ubindices=1:length(themodel.rxns);
externalconstr.lb=x1(Indrxns);
externalconstr.ub=x1(Indrxns);
[xtest1,exitflagtest1,indextest1,Lmodeltest1,fluxestest1,infotest1]=NECOM(themodel,parameters,X,thesolver,externalconstr,'FBATest');
fprintf(['The flux predicted by JointFBA is ',infotest1, ' to NECom\n']);

fprintf('Test if the flux predicted by OptCom is feasible to NECom...');
externalconstr.lbindices=1:length(themodel.rxns);
externalconstr.ubindices=1:length(themodel.rxns);
externalconstr.lb=x2(Indrxns);
externalconstr.ub=x2(Indrxns);
[xtest2,exitflagtest2,indextest2,Lmodeltest2,fluxestest2,infotest2]=NECOM(themodel,parameters,X,thesolver,externalconstr,'OptComTest');
fprintf(['The flux predicted by OptCom is ',infotest2, ' to NECom\n']);

%------------To determine the minimal subset of constraints (including bounds) responsible for
%the infeasibility the model should be exported to python environment,
%where we can call Model.computellS() to determine the minimal subset of
%infeasible constraints and bounds
fprintf('please open jupyter notebook and run checkInfeasibility.ipynb to find the minimal subset of constraints and bounds that JointFBA solution fails to satisfy\n')


%-------------Fix Individual species with Joint FBA solution and------------------

subModels=[];solutions={};number_sps=length(themodel.spBm);
%fix the lb and ub of the crossfeeding reactions to the crossfeeding fluxes
themodel_1=themodel;
%setting environment to individual model according to predictions 

posexinds=find(x1(parameters.other_Ex_all)>0);

thesecInds=parameters.other_Ex_all(posexinds);
% calculate the uptake rate based on export of other species 
spCoef=X(parameters.other_sp_ind)./X(parameters.sub_exSpi);
avaibleUpRates=x1(thesecInds).*spCoef(posexinds)';
% setting all lb based on uptake availability
themodel_1.lb(parameters.sub_indExSpi)=0;
uptake_ids=parameters.sub_indExSpi(posexinds);
themodel_1.lb(uptake_ids)=-avaibleUpRates;






for k=1:number_sps
    subModels{k,1}=make_sub_model(themodel_1,find(themodel_1.rxnSps==k),find(themodel_1.metSps==k)); 
    [singleFBAsol{k,1},singleFBAmodel{k,1}]=fba(subModels{k,1});
    writeCbModel(subModels{k,1},'xls',['JF_env_sp',num2str(k),'.xls']);
    
    xlwrite(['JF_env_sp',num2str(k),'.xls'],varname,'Reaction List','H1');
    xlwrite(['JF_env_sp',num2str(k),'.xls'],varval,'Reaction List','M1');
    
end



% print all solution to excel...
varname=[singleFBAmodel{1,1}.Model.varname;{''};singleFBAmodel{2,1}.Model.varname];
varval=[singleFBAsol{1, 1}.x; NaN;singleFBAsol{2, 1}.x];

xlwrite(filename,{'NECom'},'allsolution','A1');
xlwrite(filename,cellstr(Lmodel3.Model.varname),'allsolution','B1');
xlwrite(filename,x3,'allsolution','C1');
xlwrite(filename,{'OptCom'},'allsolution','D1');
xlwrite(filename,cellstr(Lmodel2.Model.varname),'allsolution','E1');
xlwrite(filename,x2,'allsolution','F1');
xlwrite(filename,{'JointFBA'},'allsolution','G1');
xlwrite(filename,cellstr(Lmodel1.Model.varname),'allsolution','H1');
xlwrite(filename,x1,'allsolution','I1');
xlwrite(filename,{'FBA with JointFBA predicted environment'},'allsolution','J1');










